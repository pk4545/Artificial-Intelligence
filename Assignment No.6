import sys

class Graph:
    def __init__(self, vertices):
        self.V = vertices
        self.graph = [[0 for _ in range(vertices)] for _ in range(vertices)]

    def min_key(self, key, mst_set):
        min_val = sys.maxsize
        min_index = -1

        for v in range(self.V):
            if key[v] < min_val and not mst_set[v]:
                min_val = key[v]
                min_index = v

        return min_index

    def prim_mst(self):
        parent = [-1] * self.V  # To store the MST
        key = [sys.maxsize] * self.V
        key[0] = 0  # Start from the first node

        for _ in range(self.V - 1):
            u = self.min_key(key, parent)
            parent[u] = 0
            for v in range(self.V):
                if self.graph[u][v] and not parent[v] and self.graph[u][v] < key[v]:
                    key[v] = self.graph[u][v]

        self.print_mst(parent)

    def print_mst(self, parent):
        print("Edge \t Weight")
        for i in range(1, self.V):
            print(f"{parent[i]} - {i}\t{self.graph[i][parent[i]]}")

g = Graph(5)
g.graph = [[0, 2, 0, 6, 0],
           [2, 0, 3, 8, 5],
           [0, 3, 0, 0, 7],
           [6, 8, 0, 0, 9],
           [0, 5, 7, 9, 0]]

g.prim_mst()
