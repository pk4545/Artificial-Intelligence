import heapq

# Define a simple graph as a dictionary of nodes and their neighbors
graph = {
    'A': {'B': 1, 'C': 4},
    'B': {'A': 1, 'C': 2, 'D': 5},
    'C': {'A': 4, 'B': 2, 'D': 1},
    'D': {'B': 5, 'C': 1}
}

# Heuristic function to estimate the distance from a node to the goal
def heuristic(node, goal):
    alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'
    return abs(alphabet.index(node) - alphabet.index(goal))

# A* algorithm
def astar(graph, start, goal):
    open_set = [(0, start)]  # Priority queue with initial node
    came_from = {}  # Dictionary to store the path
    g_score = {node: float('inf') for node in graph}  # Initialize to infinity
    g_score[start] = 0
    f_score = {node: float('inf') for node in graph}  # Initialize to infinity
    f_score[start] = heuristic(start, goal)

    while open_set:
        _, current = heapq.heappop(open_set)

        if current == goal:
            path = []
            while current in came_from:
                path.insert(0, current)
                current = came_from[current]
            path.insert(0, start)
            return path

        for neighbor, cost in graph[current].items():
            tentative_g_score = g_score[current] + cost

            if tentative_g_score < g_score[neighbor]:
                came_from[neighbor] = current
                g_score[neighbor] = tentative_g_score
                f_score[neighbor] = g_score[neighbor] + heuristic(neighbor, goal)
                heapq.heappush(open_set, (f_score[neighbor], neighbor))

    return None

start_node = 'A'
goal_node = 'D'

path = astar(graph, start_node, goal_node)
if path:
    print('Path:', ' -> '.join(path))
else:
    print('No path found.')
